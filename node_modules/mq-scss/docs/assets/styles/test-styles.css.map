{"version":3,"sources":["test-styles.scss","height/insideHeight/insideHeight.scss","../_mq.scss","test-styles.css","height/insideHeightVar/insideHeightVar.scss","height/maxHeight/maxHeight.scss","height/maxHeightVar/maxHeightVar.scss","height/minHeight/minHeight.scss","height/minHeightVar/minHeightVar.scss","height/outsideHeight/outsideHeight.scss","height/outsideHeightVar/outsideHeightVar.scss","media/notMedia/notMedia.scss","media/onlyMedia/onlyMedia.scss","media/simpleMedia/simpleMedia.scss","or/complexOr/complexOr.scss","or/multiOr/multiOr.scss","or/orPlusCombo/orPlusCombo.scss","or/simpleOr/simpleOr.scss","plus/complexPlus/complexPlus.scss","plus/ignoredMediaType/ignoreMediaType.scss","plus/inlinePlus/inlinePlus.scss","plus/mediaOnlyPlus/mediaOnlyPlus.scss","plus/multiPlus/multiPlus.scss","plus/simplePlus/simplePlus.scss","ratio/exactRatioWorkAround1/exactRatioWorkAround1.scss","ratio/exactRatioWorkAround2/exactRatioWorkAround2.scss","ratio/exactRatioWorkAround3/exactRatioWorkAround3.scss","ratio/insideRatio/insideRatio.scss","ratio/insideRatioVar/insideRatioVar.scss","ratio/maxRatio/maxRatio.scss","ratio/maxRatioVar/maxRatioVar.scss","ratio/minRatio/minRatio.scss","ratio/minRatioVar/minRatioVar.scss","ratio/outsideRatio/outsideRatio.scss","ratio/outsideRatioVar/outsideRatioVar.scss","ratio/ratio/ratio.scss","ratio/ratioVar/ratioVar.scss","width/inside/inside.scss","width/insideVar/insideVar.scss","width/insideWidth/insideWidth.scss","width/max/max.scss","width/maxVar/maxVar.scss","width/maxWidth/maxWidth.scss","width/min/min.scss","width/minVar/minVar.scss","width/minWidth/minWidth.scss","width/outside/outside.scss","width/outsideVar/outsideVar.scss","width/outsideWidth/outsideWidth.scss"],"names":[],"mappings":"AAKA,MACC,aAAa,AACb,sBAAsB,AACtB,mBANY,AAOZ,oBAAa,AAAb,oBAAa,AAAb,aAAa,AACb,yBAAmB,AAAnB,sBAAmB,AAAnB,mBAAmB,AACnB,wBAAuB,AAAvB,qBAAuB,AAAvB,uBAAuB,AACvB,kBAAmB,CAmBnB,AA1BD,SAUE,eAAgB,CAChB,AAXF,yBAcE,WAAW,AACX,eAAgB,CAChB,AAhBF,aAmBE,eAAe,AAAf,cAAe,CAEf,AArBF,YAwBE,kBAAmB,CACnB,ACjBD,2BACa,yCAAyD,CAAI,ACyZxE,iDD1ZF,oBDqBA,kBA/Bc,CCeb,ADiBD,0BAAW,iBAAkB,CAAK,CGGlC,ACxBA,8BACa,iCAAkC,CAAK,AFkXnD,iDEnXD,uBJoBA,kBA/Bc,CIgBb,AJgBD,6BAAW,iBAAkB,CAAK,CGgBlC,AEtCA,wBACa,+BAAwC,CAAI,AHyZvD,0BG1ZF,iBLqBA,kBA/Bc,CKeb,ALiBD,uBAAW,iBAAkB,CAAK,CG6BlC,AGlDA,2BACa,8BAA+B,CAAK,AJkXhD,0BInXD,oBNoBA,kBA/Bc,CMgBb,ANgBD,0BAAW,iBAAkB,CAAK,CG0ClC,AIhEA,wBACa,+BAAwC,CAAI,ALyZvD,0BK1ZF,iBPqBA,kBA/Bc,COeb,APiBD,uBAAW,iBAAkB,CAAK,CGuDlC,AK5EA,2BACa,8BAA+B,CAAK,ANkXhD,0BMnXD,oBRoBA,kBA/Bc,CQgBb,ARgBD,0BAAW,iBAAkB,CAAK,CGoElC,AM1FA,4BACa,0CAA0D,CAAI,APyZzE,6CO1ZF,qBTqBA,kBA/Bc,CSeb,ATiBD,2BAAW,iBAAkB,CAAK,CGiFlC,AOtGA,+BACa,kCAAmC,CAAK,ARkXpD,6CQnXD,wBVoBA,kBA/Bc,CUgBb,AVgBD,8BAAW,iBAAkB,CAAK,CG8FlC,AQpHA,uBACa,+BAAwC,CAAI,ATyZvD,qCS1ZF,gBXqBA,kBA/Bc,CWeb,AXiBD,sBAAW,iBAAkB,CAAK,CG2GlC,ASjIA,wBACa,sBAAuB,CAAK,AV6YvC,cU9YF,iBZqBA,kBA/Bc,CYeb,AZiBD,uBAAW,iBAAkB,CAAK,CGwHlC,AU9IA,0BACa,kCAA2C,CAAI,AXyZ1D,oCW1ZF,mBbqBA,kBA/Bc,Caeb,AbiBD,yBAAW,iBAAkB,CAAK,CGqIlC,AWvJA,wBACa,2BAA4B,CAAK,AZ+W7C,wGYhXD,iBdiBA,kBA/Bc,CcmBb,AdaD,uBAAW,iBAAkB,CAAK,CGkJlC,AYjKA,sBACa,yBAA0B,CAAK,Ab4W3C,wJa7WD,efcA,kBA/Bc,CesBb,AfUD,qBAAW,iBAAkB,CAAK,CG+JlC,AajLA,0BACa,6BAA8B,CAAK,Ad+W/C,qKchXD,mBhBiBA,kBA/Bc,CgBmBb,AhBaD,yBAAW,iBAAkB,CAAK,CG4KlC,Ac9LA,uBACa,0BAA2B,CAAK,Af+W5C,4CehXD,gBjBiBA,kBA/Bc,CiBmBb,AjBaD,sBAAW,iBAAkB,CAAK,CGyLlC,Ae9MA,0BACa,6BAA8B,CAAK,AhBkX/C,+GgBnXD,mBlBoBA,kBA/Bc,CkBgBb,AlBgBD,yBAAW,iBAAkB,CAAK,CGsMlC,AgB3NA,+BACa,kCAAmC,CAAK,AjBkXpD,qGiBnXD,wBnBoBA,kBA/Bc,CmBgBb,AnBgBD,8BAAW,iBAAkB,CAAK,CGmNlC,AiBxOA,yBACa,yDAAkE,CAAI,AlBkXlF,gDkBnXD,kBpBoBA,kBA/Bc,CoBgBb,ApBgBD,wBAAW,iBAAkB,CAAK,CGgOlC,AkBtPA,4BACa,wCAAiD,CAAI,AnBmXjE,oCmBpXD,qBrBqBA,kBA/Bc,CqBeb,ArBiBD,2BAAW,iBAAkB,CAAK,CG6OlC,AmB5PA,wBACa,2BAA4B,CAAK,ApB4W7C,8JoB7WD,iBtBcA,kBA/Bc,CsBsBb,AtBUD,uBAAW,iBAAkB,CAAK,CG0PlC,AoB/QA,yBACa,4BAA6B,CAAK,ArBkX9C,gDqBnXD,kBvBoBA,kBA/Bc,CuBgBb,AvBgBD,wBAAW,iBAAkB,CAAK,CGuQlC,AqB5RA,oCACa,uCAAwC,CAAK,AtBkXzD,0CsBnXD,6BxBoBA,kBA/Bc,CwBgBb,AxBgBD,mCAAW,iBAAkB,CAAK,CGoRlC,AsBzSA,oCACa,uCAAwC,CAAK,AvBkXzD,0CuBnXD,6BzBoBA,kBA/Bc,CyBgBb,AzBgBD,mCAAW,iBAAkB,CAAK,CGiSlC,AuBvTA,oCACa,uCAAwC,CAAK,AxByZxD,0CwB1ZF,6B1BqBA,kBA/Bc,C0Beb,A1BiBD,mCAAW,iBAAkB,CAAK,CG8SlC,AwBpUA,0BACa,4CAA6C,CAAK,AzByZ7D,yDyB1ZF,mB3BqBA,kBA/Bc,C2Beb,A3BiBD,yBAAW,iBAAkB,CAAK,CG2TlC,AyBhVA,6BACa,gCAAiC,CAAK,A1BkXlD,yD0BnXD,sB5BoBA,kBA/Bc,C4BgBb,A5BgBD,4BAAW,iBAAkB,CAAK,CGwUlC,A0B9VA,uBACa,gCAAiC,CAAK,A3ByZjD,8B2B1ZF,gB7BqBA,kBA/Bc,C6Beb,A7BiBD,sBAAW,iBAAkB,CAAK,CGqVlC,A2B1WA,0BACa,6BAA8B,CAAK,A5BkX/C,8B4BnXD,mB9BoBA,kBA/Bc,C8BgBb,A9BgBD,yBAAW,iBAAkB,CAAK,CGkWlC,A4BxXA,uBACa,gCAAiC,CAAK,A7ByZjD,8B6B1ZF,gB/BqBA,kBA/Bc,C+Beb,A/BiBD,sBAAW,iBAAkB,CAAK,CG+WlC,A6BpYA,0BACa,6BAA8B,CAAK,A9BkX/C,8B8BnXD,mBhCoBA,kBA/Bc,CgCgBb,AhCgBD,yBAAW,iBAAkB,CAAK,CG4XlC,A8BlZA,2BACa,6CAA8C,CAAK,A/ByZ9D,qD+B1ZF,oBjCqBA,kBA/Bc,CiCeb,AjCiBD,0BAAW,iBAAkB,CAAK,CGyYlC,A+B9ZA,8BACa,iCAAkC,CAAK,AhCkXnD,qDgCnXD,uBlCoBA,kBA/Bc,CkCgBb,AlCgBD,6BAAW,iBAAkB,CAAK,CGsZlC,AgC5aA,oBACa,4BAA6B,CAAK,AjCyZ7C,0BiC1ZF,anCqBA,kBA/Bc,CmCeb,AnCiBD,mBAAW,iBAAkB,CAAK,CGmalC,AiCxbA,uBACa,0BAA2B,CAAK,AlCkX5C,0BkCnXD,gBpCoBA,kBA/Bc,CoCgBb,ApCgBD,sBAAW,iBAAkB,CAAK,CGgblC,AkCtcA,qBACa,kCAAkD,CAAI,AnCyZjE,+CmC1ZF,crCqBA,kBA/Bc,CqCeb,ArCiBD,oBAAW,iBAAkB,CAAK,CG6blC,AmCldA,wBACa,2BAA4B,CAAK,ApCkX7C,+CoCnXD,iBtCoBA,kBA/Bc,CsCgBb,AtCgBD,uBAAW,iBAAkB,CAAK,CG0clC,AoCheA,0BACa,wCAAwD,CAAI,ArCyZvE,+CqC1ZF,mBvCqBA,kBA/Bc,CuCeb,AvCiBD,yBAAW,iBAAkB,CAAK,CGudlC,AqC7eA,kBACa,wBAAiC,CAAI,AtCyZhD,yBsC1ZF,WxCqBA,kBA/Bc,CwCeb,AxCiBD,iBAAW,iBAAkB,CAAK,CGoelC,AsCzfA,qBACa,wBAAyB,CAAK,AvCkX1C,yBuCnXD,czCoBA,kBA/Bc,CyCgBb,AzCgBD,oBAAW,iBAAkB,CAAK,CGiflC,AuCvgBA,uBACa,8BAAuC,CAAI,AxCyZtD,yBwC1ZF,gB1CqBA,kBA/Bc,C0Ceb,A1CiBD,sBAAW,iBAAkB,CAAK,CG8flC,AwCphBA,kBACa,wBAAiC,CAAI,AzCyZhD,yByC1ZF,W3CqBA,kBA/Bc,C2Ceb,A3CiBD,iBAAW,iBAAkB,CAAK,CG2gBlC,AyChiBA,qBACa,wBAAyB,CAAK,A1CkX1C,yB0CnXD,c5CoBA,kBA/Bc,C4CgBb,A5CgBD,oBAAW,iBAAkB,CAAK,CGwhBlC,A0C9iBA,uBACa,8BAAuC,CAAI,A3CyZtD,yB2C1ZF,gB7CqBA,kBA/Bc,C6Ceb,A7CiBD,sBAAW,iBAAkB,CAAK,CGqiBlC,A2C3jBA,sBACa,mCAAmD,CAAI,A5CyZlE,2C4C1ZF,e9CqBA,kBA/Bc,C8Ceb,A9CiBD,qBAAW,iBAAkB,CAAK,CGkjBlC,A4CvkBA,yBACa,4BAA6B,CAAK,A7CkX9C,2C6CnXD,kB/CoBA,kBA/Bc,C+CgBb,A/CgBD,wBAAW,iBAAkB,CAAK,CG+jBlC,A6CrlBA,2BACa,mCAAmD,CAAI,A9CyZlE,2C8C1ZF,oBhDqBA,kBA/Bc,CgDeb,AhDiBD,0BAAW,iBAAkB,CAAK,CG4kBlC","file":"test-styles.css","sourcesContent":["$test-only: false;\r\n\r\n$red: #6D0808;\r\n$green: #004700;\r\n\r\n.test {\r\n\tpadding: 30px;\r\n\tborder: 2px solid #000;\r\n\tbackground: $red;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tmargin-bottom: 20px;\r\n\r\n\th3 {\r\n\t\tmargin-bottom: 0;\r\n\t}\r\n\r\n\t&::before, &::after {\r\n\t\tcolor: #fff;\r\n\t\twhite-space: pre;\r\n\t}\r\n\r\n\t&::before {\r\n\t\tfont-size: 20px;\r\n\t\t//Use \"\\A\" to create new lines\r\n\t}\r\n\r\n\t&::after {\r\n\t\tcontent: ' = false';\r\n\t}\r\n}\r\n\r\n@mixin isActive {\r\n\tbackground: $green;\r\n\t&::after { content: ' = true'; }\r\n}\r\n\r\n@import \"height/insideHeight/insideHeight.scss\";\n@import \"height/insideHeightVar/insideHeightVar.scss\";\n@import \"height/maxHeight/maxHeight.scss\";\n@import \"height/maxHeightVar/maxHeightVar.scss\";\n@import \"height/minHeight/minHeight.scss\";\n@import \"height/minHeightVar/minHeightVar.scss\";\n@import \"height/outsideHeight/outsideHeight.scss\";\n@import \"height/outsideHeightVar/outsideHeightVar.scss\";\n@import \"media/notMedia/notMedia.scss\";\n@import \"media/onlyMedia/onlyMedia.scss\";\n@import \"media/simpleMedia/simpleMedia.scss\";\n@import \"or/complexOr/complexOr.scss\";\n@import \"or/multiOr/multiOr.scss\";\n@import \"or/orPlusCombo/orPlusCombo.scss\";\n@import \"or/simpleOr/simpleOr.scss\";\n@import \"plus/complexPlus/complexPlus.scss\";\n@import \"plus/ignoredMediaType/ignoreMediaType.scss\";\n@import \"plus/inlinePlus/inlinePlus.scss\";\n@import \"plus/mediaOnlyPlus/mediaOnlyPlus.scss\";\n@import \"plus/multiPlus/multiPlus.scss\";\n@import \"plus/simplePlus/simplePlus.scss\";\n@import \"ratio/exactRatioWorkAround1/exactRatioWorkAround1.scss\";\n@import \"ratio/exactRatioWorkAround2/exactRatioWorkAround2.scss\";\n@import \"ratio/exactRatioWorkAround3/exactRatioWorkAround3.scss\";\n@import \"ratio/insideRatio/insideRatio.scss\";\n@import \"ratio/insideRatioVar/insideRatioVar.scss\";\n@import \"ratio/maxRatio/maxRatio.scss\";\n@import \"ratio/maxRatioVar/maxRatioVar.scss\";\n@import \"ratio/minRatio/minRatio.scss\";\n@import \"ratio/minRatioVar/minRatioVar.scss\";\n@import \"ratio/outsideRatio/outsideRatio.scss\";\n@import \"ratio/outsideRatioVar/outsideRatioVar.scss\";\n@import \"ratio/ratio/ratio.scss\";\n@import \"ratio/ratioVar/ratioVar.scss\";\n@import \"width/inside/inside.scss\";\n@import \"width/insideVar/insideVar.scss\";\n@import \"width/insideWidth/insideWidth.scss\";\n@import \"width/max/max.scss\";\n@import \"width/maxVar/maxVar.scss\";\n@import \"width/maxWidth/maxWidth.scss\";\n@import \"width/min/min.scss\";\n@import \"width/minVar/minVar.scss\";\n@import \"width/minWidth/minWidth.scss\";\n@import \"width/outside/outside.scss\";\n@import \"width/outsideVar/outsideVar.scss\";\n@import \"width/outsideWidth/outsideWidth.scss\";\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin insideHeight {\r\n\t@include mq(inside-height, $BP-small, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include insideHeight { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-insideHeight {\r\n\t\t&::before { content: 'mq(inside-height, #{$BP-small}, #{$BP-medium})'; }\r\n\t\t@include insideHeight {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","$mediaQuery: ();\r\n\r\n$mq-ems: false !default;\r\n$mq-em-base: 16px !default;\r\n$mq-debug: false !default;\r\n\r\n@import '_functions';\r\n\r\n@function mediaType($mediaType: false, $hasAnd: true){\r\n\t$media: '';\r\n\t$mediaType: if($mediaType == 'not', 'not all', $mediaType);\r\n\t@if ($mediaType){\r\n\t\t$media: if($hasAnd, $mediaType + ' and ', $mediaType);\r\n\t}\r\n\t@return $media;\r\n}\r\n\r\n@function isRatio($string){\r\n\t@if (type-of($string) == 'string' and $string != 'plus'){\r\n\t\t@if (str-index($string, \"/\")){\r\n\t\t\t@return true;\r\n\t\t}\r\n\t}\r\n\t@return false;\r\n}\r\n\r\n@function isMedia($string){\r\n\t@return type-of($string) == 'string' and $string != 'plus' and not isRatio($string);\r\n}\r\n\r\n@function calculateMQ($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug){\r\n\r\n\t$swap-values: false;\r\n\r\n\t$mediaTypeString: '' + $mediaType + '';\r\n\r\n\t$invalidMediaType:\r\n\t\t($mediaType != false) and (\r\n\t\t\t(type-of($mediaType) == 'number') or\r\n\t\t\t(str-index($mediaTypeString, '/') != null)\r\n\t\t);\r\n\r\n\t@if ($invalidMediaType == true){\r\n\t\t@error '\"'+$mediaType+'\" is not a valid media type';\r\n\t}\r\n\r\n\t@if ($range == null) {\r\n\t\t@return $mediaType;\r\n\t}\r\n\r\n\t@if ($breakpoint_2 != null){\r\n\r\n\t\t@if (isRatio($breakpoint_1)){\r\n\r\n\t\t\t$A1: get-start($breakpoint_1);\r\n\t\t\t$A2: get-end($breakpoint_1);\r\n\r\n\t\t\t$B1: get-start($breakpoint_2);\r\n\t\t\t$B2: get-end($breakpoint_2);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug range_numbers \"('A1/A2', 'B1/B2')\" (A1: $A1, A2: $A2, B1: $B1, B2: $B2);\r\n\t\t\t}\r\n\r\n\t\t\t$swap-values: $A1 / $A2 < $B1 / $B2;\r\n\t\t} @else {\r\n\t\t\t$swap-values: $breakpoint_1 < $breakpoint_2;\r\n\t\t}\r\n\r\n\t\t//Swaps the breakpoint_s around\r\n\t\t@if ($swap-values){\r\n\t\t\t$temp: $breakpoint_1;\r\n\t\t\t$breakpoint_1: $breakpoint_2;\r\n\t\t\t$breakpoint_2: $temp;\r\n\t\t}\r\n\r\n\t} @else {\r\n\t\t$breakpoint_2: 0;\r\n\t}\r\n\r\n\t$mediaString: '';\r\n\r\n\t@if ($range == 'orientation'){\r\n\t\t@if ($breakpoint_1 != 'landscape' and $breakpoint_1 != 'portrait'){\r\n\t\t\t@error '\"orientation\" range only accepts the values \"landscape\" and \"portrait\". Currently providing the value \"#{$breakpoint_1}\".';\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t@debug calculateMQ (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType);\r\n\t}\r\n\r\n\t@if (str-index($range, 'inside') != null or str-index($range, 'outside') != null){\r\n\t\t@if ($breakpoint_2 == 0) {\r\n\t\t\t@error '\"#{$range}\" range requires a second value. Currently only providing \"#{$breakpoint_1}\" as a value.';\r\n\t\t}\r\n\t} @else {\r\n\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t@error '\"#{$range}\" range can only take one value. Currently providing both \"#{$breakpoint_1}\" and \"#{$breakpoint_2}\" as values.';\r\n\t\t}\r\n\t}\r\n\r\n\t@if (str-index($range, 'ratio') == null){\r\n\t\t//if a standard media query\r\n\t\t@if (type-of($breakpoint_1) != number and $range != 'orientation'){\r\n\t\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to be pixel values';\r\n\t\t\t} @else {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a pixel value';\r\n\t\t\t}\r\n\t\t}\r\n\t} @else {\r\n\t\t//else if it's a ratio...\r\n\t\t@if ((($breakpoint_2 != 0) and (type-of($breakpoint_2) != string))){\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to both be strings in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t} @else if (type-of($breakpoint_1) != string) {\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a string in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t}\r\n\t}\r\n\r\n\t$breakpoint_1_plus: $breakpoint_1 + 1;\r\n\t$breakpoint_2_plus: $breakpoint_2 + 1;\r\n\r\n\t$media: if($mediaType, $mediaType, '');\r\n\r\n\t@if ($mq-ems) {\r\n\t\t$breakpoint_1: _mq-em($breakpoint_1);\r\n\t\t$breakpoint_2: _mq-em($breakpoint_2);\r\n\t\t$breakpoint_1_plus: _mq-em($breakpoint_1_plus);\r\n\t\t$breakpoint_2_plus: _mq-em($breakpoint_2_plus);\r\n\t}\r\n\r\n\t$min-width: '(min-width: #{$breakpoint_1_plus})';\r\n\t$max-width: '(max-width: #{$breakpoint_1})';\r\n\r\n\t$inside-width: '(max-width: #{$breakpoint_1}) and (min-width: #{$breakpoint_2_plus})';\r\n\t$outside-width: '(max-width: #{$breakpoint_2}), '+$media+'(min-width: #{$breakpoint_1_plus})';\r\n\r\n\t$mediaString: map-get((\r\n\t//*1 value given*/\r\n\t\tmin : $min-width,\r\n\t\tmax : $max-width,\r\n\t\r\n\t\tmin-width : $min-width,\r\n\t\tmax-width : $max-width,\r\n\r\n\t\tmin-height : '(min-height: #{$breakpoint_1_plus})',\r\n\t\tmax-height : '(max-height: #{$breakpoint_1})',\r\n\r\n\t\tratio : '(aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-ratio : '(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-ratio : '(max-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\tdevice-ratio : '(device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-device-ratio : '(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\torientation : '(orientation: #{$breakpoint_1})',\r\n\r\n\t//*2 values given*/\r\n\t\tinside : $inside-width,\r\n\t\toutside : $outside-width,\r\n\r\n\t\tinside-width : $inside-width,\r\n\t\toutside-width : $outside-width,\r\n\r\n\t\tinside-height : '(max-height: #{$breakpoint_1}) and (min-height: #{$breakpoint_2_plus})',\r\n\t\toutside-height : '(max-height: #{$breakpoint_2}), '+$media+'(min-height: #{$breakpoint_1_plus})',\r\n\t\t\r\n\t\tinside-ratio : '(max-aspect-ratio: #{$breakpoint_1}) and (min-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-ratio : '(max-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\t\r\n\t\tinside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1}) and (min-device-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t), $range);\r\n\r\n\t@return $mediaString;\r\n}\r\n\r\n@function isBasicQuery($range) {\r\n\t$first_is_string: type-of(nth($range,1)) == string;\r\n\t$longer_than_1: length($range) > 1;\r\n\t$not_plus_statment: true;\r\n\t@if ($longer_than_1) {\r\n\t\t$not_plus_statment: nth($range,2) != 'plus';\r\n\t}\r\n\t@return $first_is_string and $longer_than_1 and $not_plus_statment;\r\n}\r\n\r\n@function get_values($mqSet, $debug: $mq-debug){\r\n\r\n\t@if ($mq-debug) {\r\n\t\t@debug mqSet (length: length($mqSet), mqSet: $mqSet);\r\n\t}\r\n\r\n\t$range: nth($mqSet,1);\r\n\t$breakpoint_1: null;\r\n\t$breakpoint_2: null;\r\n\t$media: false;\r\n\r\n\t@if (length($mqSet) == 1){\r\n\t\t$first: nth($mqSet, 1);\r\n\t\t@if (type-of($first) != 'string'){\r\n\t\t\t@error '\"#{$first}\" is not a valid media type';\r\n\t\t}\r\n\t\t$range: null;\r\n\t\t$media: $first;\r\n\t}\r\n\r\n\t@if (length($mqSet) > 1){\r\n\t\t$breakpoint_1: nth($mqSet, 2);\r\n\t}\r\n\r\n\t@if (length($mqSet) == 3){\r\n\t\t$third: nth($mqSet, 3);\r\n\r\n\t\t@if (type-of($third) == 'number' or isRatio($third)){\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t} @else {\r\n\t\t\t$media: $third;\r\n\t\t}\r\n\t}\r\n\r\n\t@if (length($mqSet) == 4){\r\n\t\t$third: nth($mqSet, 3);\r\n\t\t$fourth: nth($mqSet, 4);\r\n\r\n\t\t@if ($fourth == false and isMedia($third)){\r\n\t\t\t$media: $third;\r\n\t\t} @else {\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t\t$media: $fourth;\r\n\t\t}\r\n\r\n\t\t@if ($media == \" and \") {\r\n\t\t\t$media: '';\r\n\t\t}\r\n\t}\r\n\r\n\t$finalValues: (\r\n\t\trange: $range,\r\n\t\tbreakpoint_1: $breakpoint_1,\r\n\t\tbreakpoint_2: $breakpoint_2,\r\n\t\tmedia: mediaType($media, $range != null),\r\n\t);\r\n\r\n\t@if ($debug) {\r\n\t\t@debug get_values_result $finalValues;\r\n\t}\r\n\r\n\t@return $finalValues;\r\n}\r\n\r\n@function get_media($mqSet){\r\n\t@return map-get( get_values($mqSet), media);\r\n}\r\n\r\n@function calculateBasicQuery($mqSet, $isAndStatement: false, $debug: $mq-debug){\r\n\t$values: get_values($mqSet, $debug);\r\n\r\n\t$range: map-get($values, range);\r\n\t$breakpoint_1: map-get($values, breakpoint_1);\r\n\t$breakpoint_2: map-get($values, breakpoint_2);\r\n\t$media: map-get($values, media);\r\n\r\n\t@if ($range == null) {\r\n\t\t//if only a media type is given return nothing because it is added elsewhere\r\n\t\t@return '';\r\n\t}\r\n\r\n\t@if ((str-index($range, 'outside') != null) and $isAndStatement){\r\n\t\t$error: 'All \"outside\" range types are incompatible with \"plus\" statements: (' + $mqSet + ')';\r\n\t\t@error $error;\r\n\t}\r\n\r\n\t@return calculateMQ($range, $breakpoint_1, $breakpoint_2, $media, $debug: $debug);\r\n}\r\n\r\n@function joinQueries($range, $queryString: (), $debug: $mq-debug){\r\n\r\n\t$isAndStatement: false;\r\n\t$contains_media_only_statement: false;\r\n\t$media_statement_at_start: true;\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t@for $i from 1 through length($range) {\r\n\t\t\t$statement: nth($range,$i);\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug joinQueries_statement $statement;\r\n\t\t\t}\r\n\t\t\t$mediaNotFirst: $i != 1 and isMedia($statement);\r\n\t\t\t@if ($statement == 'plus') {\r\n\t\t\t\t$isAndStatement: true;\r\n\t\t\t\t@if ($i == 2 and length(nth($range,1)) == 1) {\r\n\t\t\t\t\t$contains_media_only_statement: true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t@if ($mediaNotFirst){\r\n\t\t\t\t$media_statement_at_start: false;\r\n\t\t\t}\r\n\t\t}\r\n\t} @else if (type-of(nth($range,1)) == 'string') {\r\n\t\t$contains_media_only_statement: true;\r\n\t}\r\n\r\n\t@if ($isAndStatement and not $media_statement_at_start) {\r\n\t\t@error 'Media type definitions must be specified at the start of plus statements: (#{$range)})';\r\n\t}\r\n\r\n\t//Uses this functionality if using a single level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--single: inside, 1000px, 500px;\r\n\t//@include mq($MQ-example--single){}\r\n\t@if (isBasicQuery($range)){\r\n\r\n\t\t@return get_media($range) + calculateBasicQuery($range, $isAndStatement, $debug: $debug);\r\n\r\n\t//Uses this functionality if using a multi level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--multiple:\r\n\t//\t(inside, 1000px, 500px),\r\n\t//\t(min, 1200px)\r\n\t//;\r\n\t//@include mq($MQ-example--multiple){}\r\n\t} @else {\r\n\r\n\t\t@each $mqSet in $range {\r\n\r\n\t\t\t@if ($mqSet != 'plus') {\r\n\t\t\t\t@if (isBasicQuery($mqSet)){\r\n\r\n\t\t\t\t\t$newQuery: calculateBasicQuery($mqSet, $isAndStatement, $debug: $debug);\r\n\r\n\t\t\t\t\t$media: get_media($mqSet);\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($queryString == ()){\r\n\t\t\t\t\t\t\t$queryString: $media + $newQuery;\r\n\t\t\t\t\t\t} @else if ($newQuery != '') {\r\n\t\t\t\t\t\t\t$queryString: $queryString + ' and ' + $newQuery;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t$queryString: append($queryString, $media + $newQuery, 'comma');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} @else {\r\n\r\n\t\t\t\t\t$is_media_only_statment: $contains_media_only_statement and type-of($mqSet) == 'string';\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: mediaType($mqSet, false);\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: joinQueries($mqSet, $queryString, $debug);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t@if (length($queryString) > 1){\r\n\t\t\t\t\t\t\t$error: 'mq-scss does not support \"or\" statements inside \"plus\" statements: ' + $queryString;\r\n\t\t\t\t\t\t\t@error $error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: $mqSet;\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: append($queryString, joinQueries($mqSet, $debug: $debug), 'comma');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@return $queryString;\r\n\t}\r\n}\r\n\r\n@mixin mq($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug) {\r\n\r\n\t@if ($debug) {\r\n\t\t@debug $range;\r\n\t}\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t$finalOutput: joinQueries($range, $debug: $debug);\r\n\t\t@if ($debug) {\r\n\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalOutput;\r\n\t\t}\r\n\t\t@media #{$finalOutput} {\r\n\t\t\t@content;\r\n\t\t}\r\n\r\n\t//Uses this functionality if placing MQ data inline\r\n\t//eg:\r\n\t//@include mq(inside, 1000px, 500px, 'screen');\r\n\t} @else {\r\n\t\t//standardises the values to prevent mediaType from getting confused with breakpoint_2\r\n\t\t$mediaOnly: $breakpoint_1 == null and $breakpoint_2 == null and $mediaType == false;\r\n\t\t@if ($debug) {\r\n\t\t\t@debug inline_mq_values (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType, mediaOnly: $mediaOnly);\r\n\t\t}\r\n\t\t$values: get_values(if($mediaOnly, $range, ($range $breakpoint_1 $breakpoint_2 $mediaType)), $debug: $debug);\r\n\r\n\t\t$newRange: map-get($values, range);\r\n\t\t$newWidth1: map-get($values, breakpoint_1);\r\n\t\t$newWidth2: map-get($values, breakpoint_2);\r\n\t\t$newMedia: map-get($values, media);\r\n\r\n\t\t@if ($mediaOnly) {\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $newMedia;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $newMedia } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t} @else {\r\n\r\n\t\t\t$finalMQ: $newMedia + calculateMQ($newRange, $newWidth1, $newWidth2, $debug: $debug);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalMQ ;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $finalMQ } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t//spacer for seperating results\r\n\t\t@debug '';\r\n\t}\r\n\r\n}\r\n\r\n@mixin retina($density: 2) {\r\n\t\t@media\r\n\t\tonly screen and (min-device-pixel-ratio: $density),\r\n\t\tonly screen and (min-resolution: $density * 96ppi),\r\n\t\tonly screen and (min-resolution: $density * 1dppx) {\r\n\t\t\t@content;\r\n\t}\r\n}\r\n",".test {\n  padding: 30px;\n  border: 2px solid #000;\n  background: #6D0808;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.test h3 {\n  margin-bottom: 0;\n}\n\n.test::before, .test::after {\n  color: #fff;\n  white-space: pre;\n}\n\n.test::before {\n  font-size: 20px;\n}\n\n.test::after {\n  content: ' = false';\n}\n\n.test.-insideHeight::before {\n  content: \"mq(inside-height, 600px, 800px)\";\n}\n\n@media (max-height: 800px) and (min-height: 601px) {\n  .test.-insideHeight {\n    background: #004700;\n  }\n  .test.-insideHeight::after {\n    content: ' = true';\n  }\n}\n\n.test.-insideHeightVar::before {\n  content: 'mq($MQ-insideHeightVar)';\n}\n\n@media (max-height: 800px) and (min-height: 601px) {\n  .test.-insideHeightVar {\n    background: #004700;\n  }\n  .test.-insideHeightVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-maxHeight::before {\n  content: \"mq(max-height, 800px)\";\n}\n\n@media (max-height: 800px) {\n  .test.-maxHeight {\n    background: #004700;\n  }\n  .test.-maxHeight::after {\n    content: ' = true';\n  }\n}\n\n.test.-maxHeightVar::before {\n  content: 'mq($MQ-maxHeightVar)';\n}\n\n@media (max-height: 800px) {\n  .test.-maxHeightVar {\n    background: #004700;\n  }\n  .test.-maxHeightVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-minHeight::before {\n  content: \"mq(min-height, 800px)\";\n}\n\n@media (min-height: 801px) {\n  .test.-minHeight {\n    background: #004700;\n  }\n  .test.-minHeight::after {\n    content: ' = true';\n  }\n}\n\n.test.-minHeightVar::before {\n  content: 'mq($MQ-minHeightVar)';\n}\n\n@media (min-height: 801px) {\n  .test.-minHeightVar {\n    background: #004700;\n  }\n  .test.-minHeightVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-outsideHeight::before {\n  content: \"mq(outside-height, 600px, 800px)\";\n}\n\n@media (max-height: 600px), (min-height: 801px) {\n  .test.-outsideHeight {\n    background: #004700;\n  }\n  .test.-outsideHeight::after {\n    content: ' = true';\n  }\n}\n\n.test.-outsideHeightVar::before {\n  content: 'mq($MQ-outsideHeightVar)';\n}\n\n@media (max-height: 600px), (min-height: 801px) {\n  .test.-outsideHeightVar {\n    background: #004700;\n  }\n  .test.-outsideHeightVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-notMedia::before {\n  content: \"mq(min, 800px, 'not')\";\n}\n\n@media not all and (min-width: 801px) {\n  .test.-notMedia {\n    background: #004700;\n  }\n  .test.-notMedia::after {\n    content: ' = true';\n  }\n}\n\n.test.-onlyMedia::before {\n  content: \"mq('screen')\";\n}\n\n@media screen {\n  .test.-onlyMedia {\n    background: #004700;\n  }\n  .test.-onlyMedia::after {\n    content: ' = true';\n  }\n}\n\n.test.-simpleMedia::before {\n  content: \"mq(min, 800px, 'screen')\";\n}\n\n@media screen and (min-width: 801px) {\n  .test.-simpleMedia {\n    background: #004700;\n  }\n  .test.-simpleMedia::after {\n    content: ' = true';\n  }\n}\n\n.test.-complexOr::before {\n  content: 'mq($MQ-complexOr)';\n}\n\n@media screen and (max-width: 800px) and (min-width: 601px), (max-aspect-ratio: 1 / 1), (min-aspect-ratio: 2 / 1) {\n  .test.-complexOr {\n    background: #004700;\n  }\n  .test.-complexOr::after {\n    content: ' = true';\n  }\n}\n\n.test.-multiOr::before {\n  content: 'mq($MQ-multiOr)';\n}\n\n@media screen and (min-width: 801px), (min-height: 801px), (max-width: 1000px) and (min-width: 601px), (max-aspect-ratio: 2 / 1) and (min-aspect-ratio: 1 / 1), print {\n  .test.-multiOr {\n    background: #004700;\n  }\n  .test.-multiOr::after {\n    content: ' = true';\n  }\n}\n\n.test.-orPlusCombo::before {\n  content: 'mq($MQ-orPlusCombo)';\n}\n\n@media screen and (min-width: 801px) and (min-height: 801px), screen and (max-width: 1000px) and (min-width: 601px) and (max-aspect-ratio: 2 / 1) and (min-aspect-ratio: 1 / 1) {\n  .test.-orPlusCombo {\n    background: #004700;\n  }\n  .test.-orPlusCombo::after {\n    content: ' = true';\n  }\n}\n\n.test.-simpleOr::before {\n  content: 'mq($MQ-simpleOr)';\n}\n\n@media (min-width: 801px), (min-height: 801px) {\n  .test.-simpleOr {\n    background: #004700;\n  }\n  .test.-simpleOr::after {\n    content: ' = true';\n  }\n}\n\n.test.-complexPlus::before {\n  content: 'mq($MQ-complexPlus)';\n}\n\n@media print and (max-width: 800px) and (min-width: 601px) and (max-aspect-ratio: 2 / 1) and (min-aspect-ratio: 1 / 1) {\n  .test.-complexPlus {\n    background: #004700;\n  }\n  .test.-complexPlus::after {\n    content: ' = true';\n  }\n}\n\n.test.-ignoredMediaType::before {\n  content: 'mq($MQ-ignoredMediaType)';\n}\n\n@media (max-width: 800px) and (min-width: 601px) and (max-aspect-ratio: 2 / 1) and (min-aspect-ratio: 1 / 1) {\n  .test.-ignoredMediaType {\n    background: #004700;\n  }\n  .test.-ignoredMediaType::after {\n    content: ' = true';\n  }\n}\n\n.test.-inlinePlus::before {\n  content: \"mq((min-width, 800px) plus (min-height, 600px))\";\n}\n\n@media (min-width: 801px) and (min-height: 601px) {\n  .test.-inlinePlus {\n    background: #004700;\n  }\n  .test.-inlinePlus::after {\n    content: ' = true';\n  }\n}\n\n.test.-mediaOnlyPlus::before {\n  content: \"mq('screen' plus (min, 800px))\";\n}\n\n@media screen and (min-width: 801px) {\n  .test.-mediaOnlyPlus {\n    background: #004700;\n  }\n  .test.-mediaOnlyPlus::after {\n    content: ' = true';\n  }\n}\n\n.test.-multiPlus::before {\n  content: 'mq($MQ-multiPlus)';\n}\n\n@media screen and (min-width: 801px) and (min-height: 401px) and (max-width: 1000px) and (min-width: 601px) and (max-aspect-ratio: 2 / 1) and (min-aspect-ratio: 1 / 1) {\n  .test.-multiPlus {\n    background: #004700;\n  }\n  .test.-multiPlus::after {\n    content: ' = true';\n  }\n}\n\n.test.-simplePlus::before {\n  content: 'mq($MQ-simplePlus)';\n}\n\n@media (min-width: 801px) and (min-height: 601px) {\n  .test.-simplePlus {\n    background: #004700;\n  }\n  .test.-simplePlus::after {\n    content: ' = true';\n  }\n}\n\n.test.-exactRatioWorkAround1::before {\n  content: 'mq($MQ-exactRatioWorkAround1)';\n}\n\n@media not all and (max-aspect-ratio: 2 / 1) {\n  .test.-exactRatioWorkAround1 {\n    background: #004700;\n  }\n  .test.-exactRatioWorkAround1::after {\n    content: ' = true';\n  }\n}\n\n.test.-exactRatioWorkAround2::before {\n  content: 'mq($MQ-exactRatioWorkAround2)';\n}\n\n@media not all and (max-aspect-ratio: 2 / 1) {\n  .test.-exactRatioWorkAround2 {\n    background: #004700;\n  }\n  .test.-exactRatioWorkAround2::after {\n    content: ' = true';\n  }\n}\n\n.test.-exactRatioWorkAround3::before {\n  content: \"mq(max-ratio, '2 / 1', 'not')\";\n}\n\n@media not all and (max-aspect-ratio: 2 / 1) {\n  .test.-exactRatioWorkAround3 {\n    background: #004700;\n  }\n  .test.-exactRatioWorkAround3::after {\n    content: ' = true';\n  }\n}\n\n.test.-insideRatio::before {\n  content: 'mq(inside-ratio, \"2 / 1\", \"1 / 1\")';\n}\n\n@media (max-aspect-ratio: 2 / 1) and (min-aspect-ratio: 1 / 1) {\n  .test.-insideRatio {\n    background: #004700;\n  }\n  .test.-insideRatio::after {\n    content: ' = true';\n  }\n}\n\n.test.-insideRatioVar::before {\n  content: 'mq($MQ-insideRatioVar)';\n}\n\n@media (max-aspect-ratio: 2 / 1) and (min-aspect-ratio: 1 / 1) {\n  .test.-insideRatioVar {\n    background: #004700;\n  }\n  .test.-insideRatioVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-maxRatio::before {\n  content: 'mq(max-ratio, \"2 / 1\")';\n}\n\n@media (max-aspect-ratio: 2 / 1) {\n  .test.-maxRatio {\n    background: #004700;\n  }\n  .test.-maxRatio::after {\n    content: ' = true';\n  }\n}\n\n.test.-maxRatioVar::before {\n  content: 'mq($MQ-maxRatioVar)';\n}\n\n@media (max-aspect-ratio: 2 / 1) {\n  .test.-maxRatioVar {\n    background: #004700;\n  }\n  .test.-maxRatioVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-minRatio::before {\n  content: 'mq(min-ratio, \"2 / 1\")';\n}\n\n@media (min-aspect-ratio: 2 / 1) {\n  .test.-minRatio {\n    background: #004700;\n  }\n  .test.-minRatio::after {\n    content: ' = true';\n  }\n}\n\n.test.-minRatioVar::before {\n  content: 'mq($MQ-minRatioVar)';\n}\n\n@media (min-aspect-ratio: 2 / 1) {\n  .test.-minRatioVar {\n    background: #004700;\n  }\n  .test.-minRatioVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-outsideRatio::before {\n  content: 'mq(outside-ratio, \"1 / 1\", \"2 / 1\")';\n}\n\n@media (max-aspect-ratio: 1 / 1), (min-aspect-ratio: 2 / 1) {\n  .test.-outsideRatio {\n    background: #004700;\n  }\n  .test.-outsideRatio::after {\n    content: ' = true';\n  }\n}\n\n.test.-outsideRatioVar::before {\n  content: 'mq($MQ-outsideRatioVar)';\n}\n\n@media (max-aspect-ratio: 1 / 1), (min-aspect-ratio: 2 / 1) {\n  .test.-outsideRatioVar {\n    background: #004700;\n  }\n  .test.-outsideRatioVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-ratio::before {\n  content: 'mq(ratio, \"2 / 1\")';\n}\n\n@media (aspect-ratio: 2 / 1) {\n  .test.-ratio {\n    background: #004700;\n  }\n  .test.-ratio::after {\n    content: ' = true';\n  }\n}\n\n.test.-ratioVar::before {\n  content: 'mq($MQ-ratioVar)';\n}\n\n@media (aspect-ratio: 2 / 1) {\n  .test.-ratioVar {\n    background: #004700;\n  }\n  .test.-ratioVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-inside::before {\n  content: \"mq(inside, 800px, 600px)\";\n}\n\n@media (max-width: 800px) and (min-width: 601px) {\n  .test.-inside {\n    background: #004700;\n  }\n  .test.-inside::after {\n    content: ' = true';\n  }\n}\n\n.test.-insideVar::before {\n  content: 'mq($MQ-insideVar)';\n}\n\n@media (max-width: 800px) and (min-width: 601px) {\n  .test.-insideVar {\n    background: #004700;\n  }\n  .test.-insideVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-insideWidth::before {\n  content: \"mq(inside-width, 600px, 800px)\";\n}\n\n@media (max-width: 800px) and (min-width: 601px) {\n  .test.-insideWidth {\n    background: #004700;\n  }\n  .test.-insideWidth::after {\n    content: ' = true';\n  }\n}\n\n.test.-max::before {\n  content: \"mq(max, 800px)\";\n}\n\n@media (max-width: 800px) {\n  .test.-max {\n    background: #004700;\n  }\n  .test.-max::after {\n    content: ' = true';\n  }\n}\n\n.test.-maxVar::before {\n  content: 'mq($MQ-maxVar)';\n}\n\n@media (max-width: 800px) {\n  .test.-maxVar {\n    background: #004700;\n  }\n  .test.-maxVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-maxWidth::before {\n  content: \"mq(max-width, 800px)\";\n}\n\n@media (max-width: 800px) {\n  .test.-maxWidth {\n    background: #004700;\n  }\n  .test.-maxWidth::after {\n    content: ' = true';\n  }\n}\n\n.test.-min::before {\n  content: \"mq(min, 800px)\";\n}\n\n@media (min-width: 801px) {\n  .test.-min {\n    background: #004700;\n  }\n  .test.-min::after {\n    content: ' = true';\n  }\n}\n\n.test.-minVar::before {\n  content: 'mq($MQ-minVar)';\n}\n\n@media (min-width: 801px) {\n  .test.-minVar {\n    background: #004700;\n  }\n  .test.-minVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-minWidth::before {\n  content: \"mq(min-width, 800px)\";\n}\n\n@media (min-width: 801px) {\n  .test.-minWidth {\n    background: #004700;\n  }\n  .test.-minWidth::after {\n    content: ' = true';\n  }\n}\n\n.test.-outside::before {\n  content: \"mq(outside, 800px, 600px)\";\n}\n\n@media (max-width: 600px), (min-width: 801px) {\n  .test.-outside {\n    background: #004700;\n  }\n  .test.-outside::after {\n    content: ' = true';\n  }\n}\n\n.test.-outsideVar::before {\n  content: 'mq($MQ-outsideVar)';\n}\n\n@media (max-width: 600px), (min-width: 801px) {\n  .test.-outsideVar {\n    background: #004700;\n  }\n  .test.-outsideVar::after {\n    content: ' = true';\n  }\n}\n\n.test.-outsideWidth::before {\n  content: \"mq(outside, 800px, 600px)\";\n}\n\n@media (max-width: 600px), (min-width: 801px) {\n  .test.-outsideWidth {\n    background: #004700;\n  }\n  .test.-outsideWidth::after {\n    content: ' = true';\n  }\n}\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin insideHeightVar {\r\n\t$MQ-insideHeightVar: (inside-height, $BP-small, $BP-medium);\r\n\t@include mq($MQ-insideHeightVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include insideHeightVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-insideHeightVar {\r\n\t\t&::before { content: 'mq($MQ-insideHeightVar)'; }\r\n\t\t@include insideHeightVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin maxHeight {\r\n\t@include mq(max-height, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include maxHeight { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-maxHeight {\r\n\t\t&::before { content: 'mq(max-height, #{$BP-medium})'; }\r\n\t\t@include maxHeight {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin maxHeightVar {\r\n\t$MQ-maxHeightVar: (max-height, $BP-medium);\r\n\t@include mq($MQ-maxHeightVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include maxHeightVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-maxHeightVar {\r\n\t\t&::before { content: 'mq($MQ-maxHeightVar)'; }\r\n\t\t@include maxHeightVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin minHeight {\r\n\t@include mq(min-height, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include minHeight { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-minHeight {\r\n\t\t&::before { content: 'mq(min-height, #{$BP-medium})'; }\r\n\t\t@include minHeight {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin minHeightVar {\r\n\t$MQ-minHeightVar: (min-height, $BP-medium);\r\n\t@include mq($MQ-minHeightVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include minHeightVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-minHeightVar {\r\n\t\t&::before { content: 'mq($MQ-minHeightVar)'; }\r\n\t\t@include minHeightVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin outsideHeight {\r\n\t@include mq(outside-height, $BP-small, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include outsideHeight { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-outsideHeight {\r\n\t\t&::before { content: 'mq(outside-height, #{$BP-small}, #{$BP-medium})'; }\r\n\t\t@include outsideHeight {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin outsideHeightVar {\r\n\t$MQ-outsideHeightVar: (outside-height, $BP-small, $BP-medium);\r\n\t@include mq($MQ-outsideHeightVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include outsideHeightVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-outsideHeightVar {\r\n\t\t&::before { content: 'mq($MQ-outsideHeightVar)'; }\r\n\t\t@include outsideHeightVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin notMedia {\r\n\t@include mq(min, $BP-medium, 'not') {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include notMedia { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-notMedia {\r\n\t\t&::before { content: \"mq(min, #{$BP-medium}, 'not')\"; }\r\n\t\t@include notMedia {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin onlyMedia {\r\n\t@include mq('screen') {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include onlyMedia { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-onlyMedia {\r\n\t\t&::before { content: \"mq('screen')\"; }\r\n\t\t@include onlyMedia {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin simpleMedia {\r\n\t@include mq(min, $BP-medium, 'screen') {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include simpleMedia { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-simpleMedia {\r\n\t\t&::before { content: \"mq(min, #{$BP-medium}, 'screen')\"; }\r\n\t\t@include simpleMedia {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin complexOr {\r\n\t$MQ-complexOr: (\r\n\t\t(inside, $BP-small, $BP-medium, 'screen'),\r\n\t\t(outside-ratio, '2/1', '1/1')\r\n\t);\r\n\t@include mq($MQ-complexOr) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include complexOr { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-complexOr {\r\n\t\t&::before { content: 'mq($MQ-complexOr)'; }\r\n\t\t@include complexOr {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin multiOr {\r\n\t$MQ-multiOr: (\r\n\t\t(min-width, $BP-medium, 'screen'),\r\n\t\t(min-height, 800px),\r\n\t\t(inside, $BP-small, $BP-large),\r\n\t\t(inside-ratio, '2/1', '1/1'),\r\n\t\t('print')\r\n\t);\r\n\t@include mq($MQ-multiOr) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include multiOr { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-multiOr {\r\n\t\t&::before { content: 'mq($MQ-multiOr)'; }\r\n\t\t@include multiOr {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin orPlusCombo {\r\n\t$MQ-orPlusCombo: (\r\n\t\t(min-width, $BP-medium, 'screen') plus (min-height, 800px),\r\n\t\t'screen' plus (inside, $BP-small, $BP-large) plus (inside-ratio, '2/1', '1/1')\r\n\t);\r\n\t@include mq($MQ-orPlusCombo) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include orPlusCombo { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-orPlusCombo {\r\n\t\t&::before { content: 'mq($MQ-orPlusCombo)'; }\r\n\t\t@include orPlusCombo {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin simpleOr {\r\n\t$MQ-simpleOr: (\r\n\t\t(min-width, $BP-medium),\r\n\t\t(min-height, 800px)\r\n\t);\r\n\t@include mq($MQ-simpleOr) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include simpleOr { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-simpleOr {\r\n\t\t&::before { content: 'mq($MQ-simpleOr)'; }\r\n\t\t@include simpleOr {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin complexPlus {\r\n\t$MQ-complexPlus: (inside-width, $BP-small, $BP-medium, 'print') plus (inside-ratio, '2/1', '1/1');\r\n\t@include mq($MQ-complexPlus) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include complexPlus { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-complexPlus {\r\n\t\t&::before { content: 'mq($MQ-complexPlus)'; }\r\n\t\t@include complexPlus {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin ignoredMediaType {\r\n\t$MQ-ignoredMediaType: (inside-width, $BP-small, $BP-medium) plus (inside-ratio, '2/1', '1/1', 'print');\r\n\t@include mq($MQ-ignoredMediaType) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include ignoredMediaType { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-ignoredMediaType {\r\n\t\t&::before { content: 'mq($MQ-ignoredMediaType)'; }\r\n\t\t@include ignoredMediaType {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin inlinePlus {\r\n\t$MQ-simplePlus: (min-width, $BP-medium) plus (min-height, 600px);\r\n\t@include mq((min-width, $BP-medium) plus (min-height, 600px)) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include inlinePlus { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-inlinePlus {\r\n\t\t&::before { content: \"mq((min-width, #{$BP-medium}) plus (min-height, 600px))\"; }\r\n\t\t@include inlinePlus {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin mediaOnlyPlus {\r\n\t@include mq('screen' plus (min, $BP-medium)) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include mediaOnlyPlus { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-mediaOnlyPlus {\r\n\t\t&::before { content: \"mq('screen' plus (min, #{$BP-medium}))\"; }\r\n\t\t@include mediaOnlyPlus {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin multiPlus {\r\n\t$MQ-multiPlus: (\r\n\t\t('screen') plus\r\n\t\t(min-width, $BP-medium) plus\r\n\t\t(min-height, 400px) plus\r\n\t\t(inside, $BP-small, $BP-large) plus\r\n\t\t(inside-ratio, '2/1', '1/1')\r\n\t);\r\n\t@include mq($MQ-multiPlus) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include multiPlus { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-multiPlus {\r\n\t\t&::before { content: 'mq($MQ-multiPlus)'; }\r\n\t\t@include multiPlus {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin simplePlus {\r\n\t$MQ-simplePlus: (min-width, $BP-medium) plus (min-height, 600px);\r\n\t@include mq($MQ-simplePlus) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include simplePlus { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-simplePlus {\r\n\t\t&::before { content: 'mq($MQ-simplePlus)'; }\r\n\t\t@include simplePlus {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin exactRatioWorkAround1 {\r\n\t$MQ-exactRatioWorkAround1: (max-ratio, '2 / 1', 'not');\r\n\t@include mq($MQ-exactRatioWorkAround1) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include exactRatioWorkAround1 { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-exactRatioWorkAround1 {\r\n\t\t&::before { content: 'mq($MQ-exactRatioWorkAround1)'; }\r\n\t\t@include exactRatioWorkAround1 {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin exactRatioWorkAround2 {\r\n\t$MQ-exactRatioWorkAround2: 'not' plus (max-ratio, '2 / 1');\r\n\t@include mq($MQ-exactRatioWorkAround2) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include exactRatioWorkAround2 { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-exactRatioWorkAround2 {\r\n\t\t&::before { content: 'mq($MQ-exactRatioWorkAround2)'; }\r\n\t\t@include exactRatioWorkAround2 {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin exactRatioWorkAround3 {\r\n\t@include mq(max-ratio, '2 / 1', 'not') {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include exactRatioWorkAround3 { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-exactRatioWorkAround3 {\r\n\t\t&::before { content: \"mq(max-ratio, '2 / 1', 'not')\"; }\r\n\t\t@include exactRatioWorkAround3 {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin insideRatio {\r\n\t@include mq(inside-ratio, \"2 / 1\", \"1 / 1\") {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include insideRatio { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-insideRatio {\r\n\t\t&::before { content: 'mq(inside-ratio, \"2 / 1\", \"1 / 1\")'; }\r\n\t\t@include insideRatio {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin insideRatioVar {\r\n\t$MQ-insideRatioVar: (inside-ratio, \"2 / 1\", \"1 / 1\");\r\n\t@include mq($MQ-insideRatioVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include insideRatioVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-insideRatioVar {\r\n\t\t&::before { content: 'mq($MQ-insideRatioVar)'; }\r\n\t\t@include insideRatioVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin maxRatio {\r\n\t@include mq(max-ratio, \"2 / 1\") {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include maxRatio { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-maxRatio {\r\n\t\t&::before { content: 'mq(max-ratio, \"2 / 1\")'; }\r\n\t\t@include maxRatio {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin maxRatioVar {\r\n\t$MQ-maxRatioVar: (max-ratio, \"2 / 1\");\r\n\t@include mq($MQ-maxRatioVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include maxRatioVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-maxRatioVar {\r\n\t\t&::before { content: 'mq($MQ-maxRatioVar)'; }\r\n\t\t@include maxRatioVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin minRatio {\r\n\t@include mq(min-ratio, \"2 / 1\") {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include minRatio { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-minRatio {\r\n\t\t&::before { content: 'mq(min-ratio, \"2 / 1\")'; }\r\n\t\t@include minRatio {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin minRatioVar {\r\n\t$MQ-minRatioVar: (min-ratio, \"2 / 1\");\r\n\t@include mq($MQ-minRatioVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include minRatioVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-minRatioVar {\r\n\t\t&::before { content: 'mq($MQ-minRatioVar)'; }\r\n\t\t@include minRatioVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin outsideRatio {\r\n\t@include mq(outside-ratio, \"1 / 1\", \"2 / 1\") {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include outsideRatio { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-outsideRatio {\r\n\t\t&::before { content: 'mq(outside-ratio, \"1 / 1\", \"2 / 1\")'; }\r\n\t\t@include outsideRatio {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin outsideRatioVar {\r\n\t$MQ-outsideRatioVar: (outside-ratio, \"2 / 1\", \"1 / 1\");\r\n\t@include mq($MQ-outsideRatioVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include outsideRatioVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-outsideRatioVar {\r\n\t\t&::before { content: 'mq($MQ-outsideRatioVar)'; }\r\n\t\t@include outsideRatioVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin ratio {\r\n\t@include mq(ratio, \"2 / 1\") {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include ratio { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-ratio {\r\n\t\t&::before { content: 'mq(ratio, \"2 / 1\")'; }\r\n\t\t@include ratio {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin ratioVar {\r\n\t$MQ-ratioVar: (ratio, \"2 / 1\");\r\n\t@include mq($MQ-ratioVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include ratioVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-ratioVar {\r\n\t\t&::before { content: 'mq($MQ-ratioVar)'; }\r\n\t\t@include ratioVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin inside {\r\n\t@include mq(inside, $BP-medium, $BP-small) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include inside { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-inside {\r\n\t\t&::before { content: 'mq(inside, #{$BP-medium}, #{$BP-small})'; }\r\n\t\t@include inside {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin insideVar {\r\n\t$MQ-insideVar: (inside, $BP-medium, $BP-small);\r\n\t@include mq($MQ-insideVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include insideVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-insideVar {\r\n\t\t&::before { content: 'mq($MQ-insideVar)'; }\r\n\t\t@include insideVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin insideWidth {\r\n\t@include mq(inside-width, $BP-small, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include insideWidth { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-insideWidth {\r\n\t\t&::before { content: 'mq(inside-width, #{$BP-small}, #{$BP-medium})'; }\r\n\t\t@include insideWidth {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin max {\r\n\t@include mq(max, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include max { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-max {\r\n\t\t&::before { content: 'mq(max, #{$BP-medium})'; }\r\n\t\t@include max {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin maxVar {\r\n\t$MQ-maxVar: (max, $BP-medium);\r\n\t@include mq($MQ-maxVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include maxVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-maxVar {\r\n\t\t&::before { content: 'mq($MQ-maxVar)'; }\r\n\t\t@include maxVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin maxWidth {\r\n\t@include mq(max-width, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include maxWidth { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-maxWidth {\r\n\t\t&::before { content: 'mq(max-width, #{$BP-medium})'; }\r\n\t\t@include maxWidth {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin min {\r\n\t@include mq(min, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include min { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-min {\r\n\t\t&::before { content: 'mq(min, #{$BP-medium})'; }\r\n\t\t@include min {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin minVar {\r\n\t$MQ-minVar: (min, $BP-medium);\r\n\t@include mq($MQ-minVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include minVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-minVar {\r\n\t\t&::before { content: 'mq($MQ-minVar)'; }\r\n\t\t@include minVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin minWidth {\r\n\t@include mq(min-width, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include minWidth { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-minWidth {\r\n\t\t&::before { content: 'mq(min-width, #{$BP-medium})'; }\r\n\t\t@include minWidth {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin outside {\r\n\t@include mq(outside, $BP-medium, $BP-small) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include outside { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-outside {\r\n\t\t&::before { content: 'mq(outside, #{$BP-medium}, #{$BP-small})'; }\r\n\t\t@include outside {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin outsideVar {\r\n\t$MQ-outsideVar: (outside, $BP-medium, $BP-small);\r\n\t@include mq($MQ-outsideVar) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include outsideVar { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-outsideVar {\r\n\t\t&::before { content: 'mq($MQ-outsideVar)'; }\r\n\t\t@include outsideVar {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n","@import '../../test-dependencies.scss';\r\n\r\n@mixin outsideWidth {\r\n\t@include mq(outside-width, $BP-small, $BP-medium) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@if ($test-only) {\r\n\t.unitTest {\r\n\t\t@include outsideWidth { color: #000; }\r\n\t}\r\n} @else {\r\n\t.test.-outsideWidth {\r\n\t\t&::before { content: 'mq(outside, #{$BP-medium}, #{$BP-small})'; }\r\n\t\t@include outsideWidth {\r\n\t\t\t@include isActive;\r\n\t\t}\r\n\t}\r\n}\r\n"]}